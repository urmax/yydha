import{_ as n,o as s,c as a,b as t}from"./app-571c1f36.js";const e={},o=t(`<h1 id="javascript-中深拷贝方法-structuredclone" tabindex="-1"><a class="header-anchor" href="#javascript-中深拷贝方法-structuredclone" aria-hidden="true">#</a> JavaScript 中深拷贝方法 structuredClone</h1><p>对于深拷贝，最容易也应该是常见的方法是使用 <code>JSON.parse() + JSON.stringify()</code> ，还有一个借助第三方脚本库 <code>lodash</code> ，其中方法 <code>cloneDeep</code> 可以实现深拷贝。现在可以使用原生的 <code>structuredClone()</code> 方法。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// value：被克隆的对象。可以是任何结构化克隆支持的类型</span>
<span class="token comment">// transfer：为可选参数，是一个可转移对象的数组，里面的 值 并没有被克隆，而是被转移到被拷贝对象上。</span>
<span class="token function">structuredClone</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">structuredClone</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span> <span class="token punctuation">{</span> transfer <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="例子" tabindex="-1"><a class="header-anchor" href="#例子" aria-hidden="true">#</a> 例子</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> objProfile <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;DevPoint&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">detail</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">30</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> deepCopy <span class="token operator">=</span> <span class="token function">structuredClone</span><span class="token punctuation">(</span>objProfile<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> shallowCopy <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token operator">...</span>deepCopy <span class="token punctuation">}</span><span class="token punctuation">;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>shallowCopy<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// {&quot;name&quot;: &quot;DevPoint&quot;, &quot;detail&quot;: {&quot;age&quot;: 35 } }</span>

deepCopy<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&#39;mike&#39;</span><span class="token punctuation">;</span>
deepCopy<span class="token punctuation">.</span>detail<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">35</span><span class="token punctuation">;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>objProfile<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// {&quot;name&quot;: &quot;DevPoint&quot;, &quot;detail&quot;: {&quot;age&quot;: 30 } }</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>deepCopy<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// {&quot;name&quot;: &quot;mike&quot;, &quot;detail&quot;: {&quot;age&quot;: 35 } }</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>更新第一层克隆对象的属性后，原始属性不会更新。 在更深层次更新属性后，原始属性既不更新。发生这种情况是因为在这种情况下，还复制了更深层次。 而对于浅拷贝对象 shallowCopy 来说，其值会随着对象 deepCopy 的变化而变化，在项目开发中很容易带来 BUG</p>`,6),p=[o];function c(l,u){return s(),a("div",null,p)}const r=n(e,[["render",c],["__file","JavaScript zhongshenkaobeifangfastructuredClone.html.vue"]]);export{r as default};
