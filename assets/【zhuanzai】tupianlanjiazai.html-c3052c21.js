import{_ as e,o as t,c as i,b as l}from"./app-571c1f36.js";const r={},a=l(`<p>在类电商类项目，往往存在大量的图片，如 banner 广告图，菜单导航图，美团等商家列表头图等。图片众多以及图片体积过大往往会影响页面加载速度，造成不良的用户体验，所以进行图片懒加载优化势在必行。</p><h3 id="为什么要进行图片懒加载" tabindex="-1"><a class="header-anchor" href="#为什么要进行图片懒加载" aria-hidden="true">#</a> 为什么要进行图片懒加载</h3><p>我们先来看一下页面启动时加载的图片信息。</p><p>如图所示，这个页面启动时加载了几十张图片（甚至更多），而这些图片请求几乎是并发的，在 Chrome 浏览器，最多支持的并发请求次数是有限的，其他的请求会推入到队列中等待或者停滞不前，直到上轮请求完成后新的请求才会发出。所以相当一部分图片资源请求是需要排队等待时间的。</p><p>在上面可以看出，有部分图片达到几百 kB，设置 2M(这锅必须运营背，非得上传高清大图不可？)，直接导致了加载时间过长。</p><p>针对以上情况，进行图片懒加载有以下优点：</p><ol><li>减少资源的加载，页面启动只加载首屏的图片，这样能明显减少了服务器的压力和流量，也能够减小浏览器的负担。</li><li>防止并发加载的资源过多而阻塞 js 的加载，影响整个网站的启动。</li><li>能提升用户的体验，不妨设想下，用户打开页面的时候，如果页面上所有的图片都需要加载，由于图片数目较大，等待时间很长这就严重影响用户体验。</li></ol><h3 id="图片懒加载的原理" tabindex="-1"><a class="header-anchor" href="#图片懒加载的原理" aria-hidden="true">#</a> 图片懒加载的原理</h3><p>图片懒加载的原理主要是判断当前图片是否到了可视区域这一核心逻辑实现的</p><ol><li>拿到所有的图片 dome 。</li><li>遍历每个图片判断当前图片是否到了可视区范围内。</li><li>如果到了就设置图片的 src 属性。</li><li>绑定 window 的 <code>scroll</code> 事件，对其进行事件监听。</li></ol><p>我们先来看下页面结构</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>&lt;html lang=&quot;en&quot;&gt;  &lt;head&gt;    &lt;meta charset=&quot;UTF-8&quot; /&gt;    &lt;title&gt;Lazyload&lt;/title&gt;    &lt;style&gt;      img {        display: block;        margin-bottom: 50px;        height: 200px;        width: 400px;      }    &lt;/style&gt;  &lt;/head&gt;  &lt;body&gt;    &lt;img src=&quot;./img/default.png&quot; data-src=&quot;./img/1.jpg&quot; /&gt;    &lt;img src=&quot;./img/default.png&quot; data-src=&quot;./img/2.jpg&quot; /&gt;    &lt;img src=&quot;./img/default.png&quot; data-src=&quot;./img/3.jpg&quot; /&gt;    &lt;img src=&quot;./img/default.png&quot; data-src=&quot;./img/4.jpg&quot; /&gt;    &lt;img src=&quot;./img/default.png&quot; data-src=&quot;./img/5.jpg&quot; /&gt;    &lt;img src=&quot;./img/default.png&quot; data-src=&quot;./img/6.jpg&quot; /&gt;    &lt;img src=&quot;./img/default.png&quot; data-src=&quot;./img/7.jpg&quot; /&gt;    &lt;img src=&quot;./img/default.png&quot; data-src=&quot;./img/8.jpg&quot; /&gt;    &lt;img src=&quot;./img/default.png&quot; data-src=&quot;./img/9.jpg&quot; /&gt;    &lt;img src=&quot;./img/default.png&quot; data-src=&quot;./img/10.jpg&quot; /&gt;  &lt;/body&gt;&lt;/html&gt;复制代码
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>先获取所有图片的 dom，通过 <code>document.body.clientHeight</code> 获取可视区高度，再使用 <code>element.getBoundingClientRect()</code> API 直接得到元素相对浏览的 top 值， 遍历每个图片判断当前图片是否到了可视区范围内。代码如下：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>function lazyload() {  let viewHeight = document.body.clientHeight //获取可视区高度  let imgs = document.querySelectorAll(&#39;img[data-src]&#39;)  imgs.forEach((item, index) =&gt; {    if (item.dataset.src === &#39;&#39;) return    // 用于获得页面中某个元素的左，上，右和下分别相对浏览器视窗的位置    let rect = item.getBoundingClientRect()    if (rect.bottom &gt;= 0 &amp;&amp; rect.top &lt; viewHeight) {      item.src = item.dataset.src      item.removeAttribute(&#39;data-src&#39;)    }  })}复制代码
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>最后给 window 绑定 <code>onscroll</code> 事件</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>window.addEventListener(&#39;scroll&#39;, lazyload)复制代码
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>主要就完成了一个图片懒加载的操作了。但是这样存在较大的性能问题，因为 <code>scroll</code> 事件会在很短的时间内触发很多次，严重影响页面性能，为了提高网页性能，我们需要一个节流函数来控制函数的多次触发，在一段时间内（如 200ms）只执行一次回调。</p><p>下面实现一个节流函数</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>function throttle(fn, delay) {  let timer  let prevTime  return function (...args) {    const currTime = Date.now()    const context = this    if (!prevTime) prevTime = currTime    clearTimeout(timer)    if (currTime - prevTime &gt; delay) {      prevTime = currTime      fn.apply(context, args)      clearTimeout(timer)      return    }    timer = setTimeout(function () {      prevTime = Date.now()      timer = null      fn.apply(context, args)    }, delay)  }}复制代码
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>然后修改一下 <code>srcoll</code> 事件</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>window.addEventListener(&#39;scroll&#39;, throttle(lazyload, 200))复制代码
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="intersectionobserver" tabindex="-1"><a class="header-anchor" href="#intersectionobserver" aria-hidden="true">#</a> IntersectionObserver</h3><p>通过上面例子的实现，我们要实现懒加载都需要去监听 <code>scroll</code> 事件，尽管我们可以通过函数节流的方式来阻止高频率的执行函数，但是我们还是需要去计算 <code>scrollTop</code>，<code>offsetHeight</code> 等属性，有没有简单的不需要计算这些属性的方式呢，答案就是 <code>IntersectionObserver</code>。</p><p><code>IntersectionObserver</code> 是一个新的 API，可以自动&quot;观察&quot;元素是否可见，Chrome 51+ 已经支持。由于可见（visible）的本质是，目标元素与视口产生一个交叉区，所以这个 API 叫做&quot;交叉观察器&quot;。我们来看一下它的用法：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>var io = new IntersectionObserver(callback, option)// 开始观察io.observe(document.getElementById(&#39;example&#39;))// 停止观察io.unobserve(element)// 关闭观察器io.disconnect()复制代码
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><code>IntersectionObserver</code> 是浏览器原生提供的构造函数，接受两个参数：callback 是可见性变化时的回调函数，option 是配置对象（该参数可选）。</p><p>目标元素的可见性变化时，就会调用观察器的回调函数 callback。callback 一般会触发两次。一次是目标元素刚刚进入视口（开始可见），另一次是完全离开视口（开始不可见）。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>var io = new IntersectionObserver((entries) =&gt; {  console.log(entries)})复制代码
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>callback 函数的参数<code>（entries）</code>是一个数组，每个成员都是一个 <code>IntersectionObserverEntry</code> 对象。举例来说，如果同时有两个被观察的对象的可见性发生变化，<code>entries</code> 数组就会有两个成员。</p><ul><li>time：可见性发生变化的时间，是一个高精度时间戳，单位为毫秒</li><li>target：被观察的目标元素，是一个 DOM 节点对象</li><li>isIntersecting: 目标是否可见</li><li>rootBounds：根元素的矩形区域的信息，<code>getBoundingClientRect()</code>方法的返回值，如果没有根元素（即直接相对于视口滚动），则返回 null</li><li>boundingClientRect：目标元素的矩形区域的信息</li><li>intersectionRect：目标元素与视口（或根元素）的交叉区域的信息</li><li>intersectionRatio：目标元素的可见比例，即 <code>intersectionRect</code> 占 <code>boundingClientRect</code> 的比例，完全可见时为 1，完全不可见时小于等于 0</li></ul><p>下面我们用 <code>IntersectionObserver</code> 实现图片懒加载</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>const imgs = document.querySelectorAll(&#39;img[data-src]&#39;)const config = {  rootMargin: &#39;0px&#39;,  threshold: 0,}let observer = new IntersectionObserver((entries, self) =&gt; {  entries.forEach((entry) =&gt; {    if (entry.isIntersecting) {      let img = entry.target      let src = img.dataset.src      if (src) {        img.src = src        img.removeAttribute(&#39;data-src&#39;)      }      // 解除观察      self.unobserve(entry.target)    }  })}, config)imgs.forEach((image) =&gt; {  observer.observe(image)})复制代码
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="懒加载指令" tabindex="-1"><a class="header-anchor" href="#懒加载指令" aria-hidden="true">#</a> 懒加载指令</h3><p>Vue 中除了平时常用的 <code>v-show</code>、<code>v-bind</code>、<code>v-for</code> 等指令外，还可以自定义指令。Vue 指令定义函数提供了几个钩子函数（可选）：</p><ul><li>bind: 只调用一次，指令第一次绑定到元素时调用，可以定义一个在绑定时执行一次的初始化动作。</li><li>inserted: 被绑定元素插入父节点时调用（父节点存在即可调用，不必存在于 document 中）。</li><li>update: 被绑定元素所在的模板更新时调用，而不论绑定值是否变化。通过比较更新前后的绑定值。</li><li>componentUpdated: 被绑定元素所在模板完成一次更新周期时调用。</li><li>unbind: 只调用一次， 指令与元素解绑时调用。</li></ul><p>实现一个懒加载指令的思路</p><ol><li>判断浏览器是否支持 <code>IntersectionObserver</code> API，如果支持就使用 <code>IntersectionObserver</code> 实现懒加载，否则则使用 <code>srcoll</code> 事件监听 + 节流的方法实现。</li><li>通过 <code>Vue.directive</code> 注册一个 <code>v-lazy</code> 的指令，暴露一个 <code>install()</code> 函数，供 Vue 调用。</li><li>在 <code>main.js</code> 里 use(指令) 即可调用。</li><li>将组件内 \`\` 标签的 <code>src</code> 换成 <code>v-lazy</code> 即可实现图片懒加载。</li></ol><p>代码如下</p><p>新建 <code>LazyLoad.js</code> 文件</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>const LazyLoad = {  // install方法  install(Vue, options) {    const defaultSrc = options.default    Vue.directive(&#39;lazy&#39;, {      bind(el, binding) {        LazyLoad.init(el, binding.value, defaultSrc)      },      inserted(el) {        if (IntersectionObserver) {          LazyLoad.observe(el)        } else {          LazyLoad.listenerScroll(el)        }      },    })  },  // 初始化  init(el, val, def) {    el.setAttribute(&#39;data-src&#39;, val)    el.setAttribute(&#39;src&#39;, def)  },  // 利用IntersectionObserver监听el  observe(el) {    var io = new IntersectionObserver((entries) =&gt; {      const realSrc = el.dataset.src      if (entries[0].isIntersecting) {        if (realSrc) {          el.src = realSrc          el.removeAttribute(&#39;data-src&#39;)        }      }    })    io.observe(el)  },  // 监听scroll事件  listenerScroll(el) {    const handler = LazyLoad.throttle(LazyLoad.load, 300)    LazyLoad.load(el)    window.addEventListener(&#39;scroll&#39;, () =&gt; {      handler(el)    })  },  // 加载真实图片  load(el) {    const windowHeight = document.documentElement.clientHeight    const elTop = el.getBoundingClientRect().top    const elBtm = el.getBoundingClientRect().bottom    const realSrc = el.dataset.src    if (elTop - windowHeight &lt; 0 &amp;&amp; elBtm &gt; 0) {      if (realSrc) {        el.src = realSrc        el.removeAttribute(&#39;data-src&#39;)      }    }  },  // 节流  throttle(fn, delay) {    let timer    let prevTime    return function (...args) {      const currTime = Date.now()      const context = this      if (!prevTime) prevTime = currTime      clearTimeout(timer)      if (currTime - prevTime &gt; delay) {        prevTime = currTime        fn.apply(context, args)        clearTimeout(timer)        return      }      timer = setTimeout(function () {        prevTime = Date.now()        timer = null        fn.apply(context, args)      }, delay)    }  },}export default LazyLoad复制代码
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>在 <code>main.js</code> 里 use 指令</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>import LazyLoad from &#39;./LazyLoad.js&#39;Vue.use(LazyLoad, {  default: &#39;xxx.png&#39;,})复制代码
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>将组件内 \`\` 标签的 <code>src</code> 换成 <code>v-lazy</code></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>&lt;img v-lazy=&quot;xxx.jpg&quot; /&gt;复制代码
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这样就能完成一个 vue 懒加载的指令了。</p><h3 id="小结" tabindex="-1"><a class="header-anchor" href="#小结" aria-hidden="true">#</a> 小结</h3><ol><li>为提高网站加载性能，图片懒加载是必要的。</li><li>图片懒加载是实现原理是判断当前图片是否到了可视区域进行加载，可通过监听 scroll 事件和 IntersectionObserver 实现相应的功能。</li><li>可通过 Vue.directive 编写图片懒加载指令。</li></ol>`,47),o=[a];function n(d,c){return t(),i("div",null,o)}const u=e(r,[["render",n],["__file","【zhuanzai】tupianlanjiazai.html.vue"]]);export{u as default};
